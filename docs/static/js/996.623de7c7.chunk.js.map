{"version":3,"file":"static/js/996.623de7c7.chunk.js","mappings":"iLAIA,MAOMA,EAAW,CACf,2CACA,4BACA,yCACA,0CACA,yCACA,0CACA,qCACA,0CACA,6BACA,iBACA,wCACA,kCACA,+BACA,yCACA,0CAqBIC,EAAYC,IAAsB,IAArB,YAAEC,GAAaD,EAChC,MAGOE,EAAKC,IAAcC,EAAAA,EAAAA,UAAS,IAC5BC,EAASC,IAAiBF,EAAAA,EAAAA,UAASN,EAASI,KAC5CK,EAAMC,IAAcJ,EAAAA,EAAAA,UAAS,IAC7BK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,GA0BzC,MAnDkBO,EAACC,EAAUC,KAC7B,MAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,KACRF,EAAcG,QAAUL,CAAQ,GAC/B,CAACA,KAEJI,EAAAA,EAAAA,YAAU,KACR,GAAIH,EAAO,CACT,MAAMK,EAAKC,aAAY,KACrBL,EAAcG,SAAS,GACtBJ,GACH,MAAO,IAAMO,cAAcF,EAC7B,CACA,MAAO,MAAQ,GACd,CAACL,GAAO,EAYXF,EACE,KACE,IAAIU,EAASnB,EACToB,EAAUf,EACVA,EAZK,IAYUT,EAASI,GAAKqB,SAC/BF,GAAU,EACVC,EAAU,GAERD,IAAWvB,EAASyB,OAClBtB,GACFE,EAAW,GACXK,EAAW,IAEXE,GAAY,IAGdJ,EAAcR,EAASuB,GAAQG,MAAM,EAAGF,IACxCnB,EAAWkB,GACXb,EAAWc,EAAU,GACvB,GAEFb,EA5BY,GA4BO,OAInBgB,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,OA/EgBC,EA+EIvB,EA5Eb,mEACDwB,KAAKD,IAAyB,IAAhBA,EAAKL,OA2EM,CAAC,EAAI,CAAEO,MAAO,QAC7CC,aAAcA,IAAMrB,GAAY,GAChCsB,aAAcA,IAAM9B,EAAMJ,EAASyB,QAAUb,GAAY,GAAMuB,UAE/DC,EAAAA,EAAAA,MAAA,KAAGC,KAAK,oCAAmCF,SAAA,EACzCR,EAAAA,EAAAA,KAAA,QAAAQ,SAAO5B,KACPoB,EAAAA,EAAAA,KAAA,QAAAQ,SAAM,qBArFQL,KAuFZ,EAIV7B,EAAUqC,aAAe,CACvBnC,aAAa,GAOf,U,aChGA,MAsBA,EAtBgBoC,KACdZ,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,yDAAwDP,UAEpEC,EAAAA,EAAAA,MAAA,WAASR,UAAU,OAAOR,GAAG,UAASe,SAAA,EACpCR,EAAAA,EAAAA,KAAA,UAAAQ,UACER,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOO,UACpBR,EAAAA,EAAAA,KAAA,MAAAQ,UACER,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACC,GAAG,WAAUT,SAAC,mBAI1BC,EAAAA,EAAAA,MAAA,OAAKR,UAAU,WAAUO,SAAA,EACvBR,EAAAA,EAAAA,KAAA,KAAAQ,SAAG,sDACHR,EAAAA,EAAAA,KAAC1B,EAAS,QAEZ0B,EAAAA,EAAAA,KAACkB,EAAAA,EAAY,Q","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'hello, like the start of something great',\n  'hi, soft as a setting sun',\n  'hola, where ambition meets the horizon',\n  'reach me at almost-anything, I am ready',\n  'but not just *anything*, almost though',\n  'like-this, with the glow of opportunity',\n  'or-this, where effort meets reward',\n  'but not this, fading like daylight :(  ',\n  'email me about things like',\n  'just saying hi',\n  'please work for us (my favorite line)',\n  'needing help with something big',\n  'admin for dreams that matter',\n  'or collaborating under the evening sky',\n  'thanks, like a sunset after a long day',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = ({ loopMessage }) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(\n    () => {\n      let newIdx = idx;\n      let newChar = char;\n      if (char - hold >= messages[idx].length) {\n        newIdx += 1;\n        newChar = 0;\n      }\n      if (newIdx === messages.length) {\n        if (loopMessage) {\n          updateIter(0);\n          updateChar(0);\n        } else {\n          setIsActive(false);\n        }\n      } else {\n        updateMessage(messages[newIdx].slice(0, newChar));\n        updateIter(newIdx);\n        updateChar(newChar + 1);\n      }\n    },\n    isActive ? delay : null,\n  );\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => idx < messages.length && setIsActive(true)}\n    >\n      <a href=\"mailto: shamithagvenkat@gmail.com\">\n        <span>{message}</span>\n        <span>@sgowra.com</span>\n      </a>\n    </div>\n  );\n};\n\nEmailLink.defaultProps = {\n  loopMessage: false,\n};\n\nEmailLink.propTypes = {\n  loopMessage: PropTypes.bool,\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Shamitha via email @ shamithagvenkat@gmail.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2>\n            <Link to=\"/contact\">Contact</Link>\n          </h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>Feel free to get in touch. You can email me at: </p>\n        <EmailLink />\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["messages","EmailLink","_ref","loopMessage","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","length","slice","_jsx","className","style","text","test","color","onMouseEnter","onMouseLeave","children","_jsxs","href","defaultProps","Contact","Main","title","description","Link","to","ContactIcons"],"sourceRoot":""}